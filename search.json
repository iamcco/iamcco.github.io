{"contents":[{"title":"JavaScript 继承","path":"2016/04/27/JavaScript继承/","urls":[],"content":"<p>关于JavaScript对象继承，由于JavaScript并没有类，所以对象的继承是通过原型链子来完成的。</p>\n<p>一般的继承如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Man</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Man.prototype = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lettleMing'</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">Man.prototype.constructor = Man;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Man();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(man.name, man.age);                 <span class=\"comment\">// lettleMing 12</span></span><br></pre></td></tr></table></figure>\n<p>上面是一般的继承的写法，在看看错误的写法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Man</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    Man.prototype = <span class=\"keyword\">new</span> Person(<span class=\"string\">'lettleMing'</span>, <span class=\"number\">12</span>);</span><br><span class=\"line\">    Man.prototype.constructor = Man;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> man = <span class=\"keyword\">new</span> Man();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(man.name, man.age);                 <span class=\"comment\">// undefined undefined</span></span><br></pre></td></tr></table></figure>\n<p>之所以会出现上面这种情况，是由于不了解<strong>new</strong>操作符创建对象的过程。在<code>var man = new Man()</code>这句执行的过程中，首先：</p>\n<ol>\n<li>通过继承<code>Man.prototype</code>创建一个新的对象。</li>\n<li>使用<code>argumengs</code>参数调用<code>Man</code>构造方法，并且把<code>this</code>指向第一步创建的对象。</li>\n<li>如果<code>Man</code>方法没有<code>return</code>语句，即返回一个对象，则使用第一步生成的对象作为<code>new</code>表达式的返回值返回。</li>\n</ol>\n<p>第二种方法由于在创建对象的过程中，继承这一步先于构造方法的执行，所以构造方法中对原型的修改并没有反应到新生成的对象当中。</p>\n<h5 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h5><ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new\" target=\"_blank\" rel=\"external\">new 操作符</a></li>\n</ol>\n"},{"title":"Neovim 插件开发","path":"2016/03/21/Neovim-插件开发/","urls":[],"content":"<p>自从掉进 vim 这个大坑之后，用其他编辑器总是感觉很不舒服，就算装了 vim-mode 插件也是一个样。在用了几个月的 Atom 和 Webstorm 后，还是把 Windows 卸了装了 Ubuntu，然后装了 neovim，：）。之所以转向 neovim 的理由是 neovim 的很多特性真的很令人兴奋，并且对 vim 的兼容程度很高，配置基本不用做任何修改就能用。从 neovim 发布 0.1.0 版的时候就特别想试试，现在连续用了一个多月，感觉很棒。</p>\n<p>吧啦吧啦了这么多，下面进入这篇文章的主题，编写一个简单的 neovim 插件</p>\n<p><a href=\"https://github.com/iamcco/dict.nvim\" target=\"_blank\" rel=\"external\">dict.nvim</a> 一个简单的翻译插件</p>\n<p>以前曾写过一个 <a href=\"https://github.com/iamcco/dict.vim\" target=\"_blank\" rel=\"external\">dict.vim</a> 插件，这个插件在网络流畅的时候是没有什么问题的，但是在网络很差的时候，在翻译的过程中可能要卡你个一秒半秒的，让人很不爽。这也是因为 vim 本身不支持异步（到目前为止貌似 vim 已经开始支持 job）</p>\n<p>下面开写</p>\n<p>打开 neovim，输入 <code>:h remote-plugin</code> 回车，可以看帮助文档，并且附有一个简单的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> neovim</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@neovim.plugin</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Limit</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, vim)</span>:</span></span><br><span class=\"line\">        self.vim = vim</span><br><span class=\"line\">        self.calls = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @neovim.command('Cmd', range='', nargs='*', sync=True)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">command_handler</span><span class=\"params\">(self, args, range)</span>:</span></span><br><span class=\"line\">        self._increment_calls()</span><br><span class=\"line\">        self.vim.current.line = (</span><br><span class=\"line\">            <span class=\"string\">'Command: Called %d times, args: %s, range: %s'</span> % (self.calls,</span><br><span class=\"line\">                                                               args,</span><br><span class=\"line\">                                                               range))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @neovim.autocmd('BufEnter', pattern='*.py', eval='expand(\"&lt;afile&gt;\")',</span></span><br><span class=\"line\">                    sync=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">autocmd_handler</span><span class=\"params\">(self, filename)</span>:</span></span><br><span class=\"line\">        self._increment_calls()</span><br><span class=\"line\">        self.vim.current.line = (</span><br><span class=\"line\">            <span class=\"string\">'Autocmd: Called %s times, file: %s'</span> % (self.calls, filename))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @neovim.function('Func')</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">function_handler</span><span class=\"params\">(self, args)</span>:</span></span><br><span class=\"line\">        self._increment_calls()</span><br><span class=\"line\">        self.vim.current.line = (</span><br><span class=\"line\">            <span class=\"string\">'Function: Called %d times, args: %s'</span> % (self.calls, args))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_increment_calls</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.calls == <span class=\"number\">5</span>:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> Exception(<span class=\"string\">'Too many calls!'</span>)</span><br><span class=\"line\">        self.calls += <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>把代码保存到 <code>~/.config/nvim/rplugin/python/limit.py</code>，然后敲入 <code>:UpdateRemotePluins</code> 回车，这样一个简单的插件就配置好了，然后敲入 <code>:Cmd</code> 命令等就能看到效果。</p>\n<p>有了这个例子我们就能开始写我们的插件了，当然前提是需要对 vim 的插件开发有所了解。</p>\n<p>首先在 github 上新建一个项目，我建的项目名字是 <code>dict.nvim</code>，然后通过插件管理器安装这个“插件”，<br>我用的 plug-vim 来管理插件，所以只需要写入 <code>Plug &#39;iamcco/dict.nvim&#39;</code>，之后保存退出后，再次进入<br>neovim 然后敲入 <code>:PlugInstall</code> 就能安装到本地了。</p>\n<p>进入 dict.nvim 插件目录，创建以下文件结构:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict<span class=\"selector-class\">.nvim</span></span><br><span class=\"line\">├── <span class=\"selector-class\">.gitignore</span></span><br><span class=\"line\">├── plugin</span><br><span class=\"line\">│   └── dict<span class=\"selector-class\">.vim</span></span><br><span class=\"line\">└── rplugin</span><br><span class=\"line\">    └── python3</span><br><span class=\"line\">        ├── dict</span><br><span class=\"line\">        │   ├── __init__<span class=\"selector-class\">.py</span></span><br><span class=\"line\">        │   └── util<span class=\"selector-class\">.py</span></span><br><span class=\"line\">        └── dict.py</span><br></pre></td></tr></table></figure>\n<p>在 .gitignore 中加入不想同步的文件 <code>*.pyc</code></p>\n<p>首先要翻译，得有一个翻译的 api，这里用的是<a href=\"http://fanyi.youdao.com/openapi?path=data-mode\" target=\"_blank\" rel=\"external\">有道翻译 API</a></p>\n<p>用有道翻译得申请 key，当然是免费的，这里我申请的 key 是：</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">keyfrom:</span> aioiyuuko</span><br><span class=\"line\"><span class=\"symbol\">key:</span>     <span class=\"number\">1932136763</span></span><br></pre></td></tr></table></figure>\n<p>然后就可以通过:</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">http</span>://fanyi.youdao.com/openapi.<span class=\"keyword\">do</span>?keyfrom=aioiyuuko&amp;key=<span class=\"number\">1932136763</span>&amp;<span class=\"class\"><span class=\"keyword\">type</span>=<span class=\"keyword\">data</span>&amp;doctype=json&amp;version=1.1&amp;q=hello</span></span><br></pre></td></tr></table></figure>\n<p>在浏览器地址填入上面的接口地址，就能得到 hello 的翻译了</p>\n<p>好了，接口有了就开始写插件。</p>\n<p>打开 <code>util.py</code> 编写工具类：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"><span class=\"keyword\">from</span> urllib <span class=\"keyword\">import</span> request</span><br><span class=\"line\"></span><br><span class=\"line\">URL     = <span class=\"string\">'http://fanyi.youdao.com/openapi.do?keyfrom=%s&amp;key=%s&amp;type=data&amp;\\</span><br><span class=\"line\">                                                doctype=json&amp;version=1.1&amp;q=%s'</span></span><br><span class=\"line\">errorCode = &#123;</span><br><span class=\"line\">    <span class=\"string\">'0'</span>:       <span class=\"string\">'success'</span>,</span><br><span class=\"line\">    <span class=\"string\">'20'</span>:      <span class=\"string\">'Text is too loog'</span>,</span><br><span class=\"line\">    <span class=\"string\">'30'</span>:      <span class=\"string\">'Cannot not be translated effectively'</span>,</span><br><span class=\"line\">    <span class=\"string\">'40'</span>:      <span class=\"string\">'Language type is not suppport'</span>,</span><br><span class=\"line\">    <span class=\"string\">'50'</span>:      <span class=\"string\">'Invalid key'</span>,</span><br><span class=\"line\">    <span class=\"string\">'60'</span>:      <span class=\"string\">'No result'</span>,</span><br><span class=\"line\">    <span class=\"string\">'other'</span>:   <span class=\"string\">'Query failed'</span>,</span><br><span class=\"line\">    <span class=\"string\">'noQuery'</span>: <span class=\"string\">'Result type is not json'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Util</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, keyfrom, key)</span>:</span></span><br><span class=\"line\">        self.keyfrom = keyfrom</span><br><span class=\"line\">        self.key = key</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">filter</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        result = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> data[<span class=\"string\">'errorCode'</span>] == <span class=\"number\">0</span>:</span><br><span class=\"line\">            result[<span class=\"string\">'status'</span>] = <span class=\"keyword\">True</span></span><br><span class=\"line\">            result[<span class=\"string\">'message'</span>] = <span class=\"string\">' '</span>.join(data[<span class=\"string\">'translation'</span>])</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            result[<span class=\"string\">'status'</span>] = <span class=\"keyword\">False</span></span><br><span class=\"line\">            result[<span class=\"string\">'message'</span>] = errorCode[str(data[<span class=\"string\">'errorCode'</span>])]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">query</span><span class=\"params\">(self, q = <span class=\"string\">''</span>, type = <span class=\"string\">'base'</span>)</span>:</span></span><br><span class=\"line\">        queryUrl = URL % (self.keyfrom, self.key, request.quote(q))</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            data = request.urlopen(queryUrl).read().decode(<span class=\"string\">'utf-8'</span>)</span><br><span class=\"line\">            data = json.loads(data)</span><br><span class=\"line\">            data = self.filter(data)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> ValueError:</span><br><span class=\"line\">            data = &#123;</span><br><span class=\"line\">                <span class=\"string\">'status'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">                <span class=\"string\">'message'</span>: errorCode[<span class=\"string\">'noQuery'</span>],</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">except</span> request.URLError <span class=\"keyword\">as</span> message:</span><br><span class=\"line\">            data = &#123;</span><br><span class=\"line\">                <span class=\"string\">'status'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">                <span class=\"string\">'message'</span>: <span class=\"string\">'No network'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> message:</span><br><span class=\"line\">            data = &#123;</span><br><span class=\"line\">                <span class=\"string\">'status'</span>: <span class=\"keyword\">False</span>,</span><br><span class=\"line\">                <span class=\"string\">'message'</span>: message</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data</span><br></pre></td></tr></table></figure>\n<p>工具类 Util 有三个方法，<code>__init__</code> 方法初始化对象，保存 key 和 keyfrom，<code>filter</code> 方法处理数据为需要的格式，<code>query</code> 用来获取翻译数据。</p>\n<p>打开 <code>__init__.py</code> 编写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> neovim</span><br><span class=\"line\"><span class=\"keyword\">from</span> dict.util <span class=\"keyword\">import</span> Util</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@neovim.plugin</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dict</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, vim)</span>:</span></span><br><span class=\"line\">        self.vim = vim</span><br><span class=\"line\">        self.util = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @neovim.function('__dict_query')</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">dict_query</span><span class=\"params\">(self, args)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.util == <span class=\"string\">''</span>:</span><br><span class=\"line\">            self.util = Util(args[<span class=\"number\">0</span>], args[<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">        data = self.util.query(<span class=\"string\">' '</span>.join(args[<span class=\"number\">2</span>:]))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> data[<span class=\"string\">'status'</span>]:</span><br><span class=\"line\">            message = data[<span class=\"string\">'message'</span>]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            message = <span class=\"string\">'Search failed：%s'</span> % data[<span class=\"string\">'message'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># escape \" and '</span></span><br><span class=\"line\">        message = message.replace(<span class=\"string\">'\"'</span>,<span class=\"string\">'\\\\\"'</span>).replace(<span class=\"string\">\"'\"</span>,<span class=\"string\">\"\\\\'\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        self.vim.command(<span class=\"string\">'echo \"%s\"'</span> % message)</span><br></pre></td></tr></table></figure>\n<p>首先引入 neovim 模块，然后是我们上面写的工具类 Util，然后通过 neovim 模块的修饰器定义 Dict 类， <code>__init__</code> 方法初始化的时候，neovim 会传入 vim 对象，有了这个对象，就可以像对 neovim 进行各种操作了。<code>@neovim.function</code> 修饰器的作用就是在让 python 方法可以在 viml 中调用，在 neovim 中 <code>:call __dict_query</code> 调用的就是 <code>dict_query</code> 这个方法</p>\n<blockquote>\n<p>关于 vim 这个对象，可以通过 <code>:h python-vim</code> 查看文档</p>\n</blockquote>\n<p>好了，现在敲入 <code>:UpdateRemotePluins</code> 回车，现在就可以通过 <code>:call __dict_query(&#39;1932136763&#39;, &#39;aioiyuuko&#39;, &#39;hello&#39;)</code> 看到 hello 的翻译结果了</p>\n<p>每次这样翻译，估计没人会用这个插件吧。。。</p>\n<p>最后一步就是写个 function 封装一下，然后配置一下快捷键，一键翻译什么的</p>\n<p>打开 <code>dict.vim</code> 文件编写：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">\" 有道 openapi key</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> !exists(<span class=\"string\">'g:dict_key'</span>) || !exists(<span class=\"string\">'g:dict_keyfrom'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">g:dict_keyfrom</span> = <span class=\"string\">'aioiyuuko'</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> <span class=\"variable\">g:dict_key</span> = <span class=\"string\">'1932136763'</span></span><br><span class=\"line\"><span class=\"keyword\">endif</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">nmap</span> <span class=\"symbol\">&lt;silent&gt;</span> <span class=\"symbol\">&lt;Leader&gt;</span>d :<span class=\"keyword\">call</span> __dict_query(<span class=\"variable\">g:dict_keyfrom</span>, <span class=\"variable\">g:dict_key</span>, <span class=\"built_in\">expand</span>(<span class=\"string\">\"&lt;cword&gt;\"</span>))</span><br></pre></td></tr></table></figure>\n<p>返回 normal 模式，敲入 <code>:source %</code> 回车，现在把光标移到一个单词上，敲入快捷键 <code>&lt;Leader&gt;d</code>，就能翻译当前光标下的单词了</p>\n<p>好了，一个最简单的插件就写完了。</p>\n<p>全部代码看这里 <a href=\"https://github.com/iamcco/dict.nvim\" target=\"_blank\" rel=\"external\">dict.nvim</a></p>\n"},{"title":"hello world","path":"2015/01/10/hello-world/","urls":[],"content":"<p>电助！凉子，看到了吗！？</p>\n"},{"title":"兴趣项目汇总","path":"2016/03/20/兴趣项目汇总/","urls":[],"content":"<p>这里主要汇总平时写的一些兴趣项目，包括：前端 Vim/neovim python 等。<br>都放在 <a href=\"https://github.com/iamcco\" target=\"_blank\" rel=\"external\">Github</a> 上，欢迎 Follow/Star。</p>\n<p>分类：</p>\n<ol>\n<li><a href=\"#Vim-Neovim-Plugins\">Vim/Neovim Plugins</a></li>\n<li><a href=\"#Dotfiles\">Dotfiles</a></li>\n<li><a href=\"#Hexo-Theme-and-Plugins\">Hexo Theme and Plugins</a></li>\n<li><a href=\"#Python\">Python</a></li>\n</ol>\n<hr>\n<h4 id=\"Vim-Neovim-Plugins\"><a href=\"#Vim-Neovim-Plugins\" class=\"headerlink\" title=\"Vim Neovim Plugins\"></a>Vim Neovim Plugins</h4><p><strong><a href=\"https://github.com/iamcco/markdown-preview.vim\" target=\"_blank\" rel=\"external\">markdown-preview.vim</a></strong></p>\n<p>通过浏览器即时预览 markdown</p>\n<ul>\n<li>支持 windows/mac/linux</li>\n<li>没有外部依赖，不错需要 Vim/Neovim 支持 python/python3 特性</li>\n<li>预览支持 Github Flavored Markdown</li>\n</ul>\n<p><strong><a href=\"https://github.com/iamcco/dict.vim\" target=\"_blank\" rel=\"external\">dict.vim</a></strong></p>\n<p>通过有道翻译 api 进行翻译</p>\n<ul>\n<li>翻译光标下（或选中）的文字</li>\n<li>翻译并替换光标（或选中）文字</li>\n<li>通过预览窗口查看详细的翻译结果</li>\n</ul>\n<p><strong><a href=\"https://github.com/iamcco/dict.nvim\" target=\"_blank\" rel=\"external\">dic.nvim</a></strong></p>\n<p>通过有道翻译 api 进行翻译</p>\n<ul>\n<li>翻译光标下（或选中）的文字</li>\n</ul>\n<blockquote>\n<p>和 dict.vim 插件不同之处在于该插件只支持 neovim，利用 neovim 的异步特性，在翻译的过程中不会因为网速慢而卡住</p>\n</blockquote>\n<h4 id=\"Dotfiles\"><a href=\"#Dotfiles\" class=\"headerlink\" title=\"Dotfiles\"></a>Dotfiles</h4><p><strong><a href=\"https://github.com/iamcco/vimrc.backup\" target=\"_blank\" rel=\"external\">vimrc.backup</a></strong></p>\n<p>Vim 配置文件备份（vimrc/font/dll），由于新建了 dotfiles 所以不在更新</p>\n<p><strong><a href=\"https://github.com/iamcco/dotfiles\" target=\"_blank\" rel=\"external\">dotfiles</a></strong></p>\n<p>Neovim/zsh/tmux/ternjs 等配置文件备份（包括一份开源补丁字体 Fantasque-sans）</p>\n<h4 id=\"Hexo-Theme-and-Plugins\"><a href=\"#Hexo-Theme-and-Plugins\" class=\"headerlink\" title=\"Hexo Theme and Plugins\"></a>Hexo Theme and Plugins</h4><p><strong><a href=\"https://github.com/iamcco/yuuko\" target=\"_blank\" rel=\"external\">yuuko</a></strong></p>\n<p>一款简单的 Hexo 主题，目前只有 index 和 post 页</p>\n<ul>\n<li>首页是看着 QQ 的时光轴撸出来的</li>\n<li>post 页基本是 <a href=\"https://github.com/iamcco/markdown.css\" target=\"_blank\" rel=\"external\">markdown.css</a>，一个我写的 Github Styles like 样式</li>\n<li><a href=\"https://github.com/iamcco/hexo-generator-counts\" target=\"_blank\" rel=\"external\">hexo-generator-counts</a>，hexo 插件，用来生成所有文章中的图片链接和文章总数</li>\n</ul>\n<p><strong><a href=\"https://github.com/iamcco/hexo-generator-counts\" target=\"_blank\" rel=\"external\">hexo-generator-counts</a></strong></p>\n<p>Hexo 插件，用来生成所有文章里面的图片链接和文章总数</p>\n<blockquote>\n<p>打算写的功能还没写完，主要跟着 yuuko 这个主题走</p>\n</blockquote>\n<h4 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h4><p><strong><a href=\"https://github.com/iamcco/manga-download\" target=\"_blank\" rel=\"external\">manga-download</a></strong></p>\n<p>下漫画脚本</p>\n<p><strong><a href=\"https://github.com/iamcco/Bencode\" target=\"_blank\" rel=\"external\">Bencode</a></strong></p>\n<p>解析 torrent 种子文件，写来主要用来更改 torrent 里面文件信息，骗过百度某些 torrent 种子（你懂的）不能通过离线资源下载问题</p>\n"}],"iTotal":0,"aTotal":4}